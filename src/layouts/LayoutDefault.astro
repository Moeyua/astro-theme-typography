---
import { getImage } from "astro:assets";
import { SEO, type SEOProps } from "astro-seo";
import { themeConfig } from "~/.config";
import PageFooter from "~/components/PageFooter.astro";
// import "~/styles/heti.min.css";
import "~/styles/index.css";
import "~/styles/animation.css";
import PageNav from "~/components/PageNav.astro";
import PageTitle from "~/components/PageTitle.astro";

interface Props {
	title?: string;
	desc?: string;
	banner?: ImageMetadata;
}

const props = Astro.props;

const title = props.title ?? themeConfig.site.title;
const desc = props.desc ?? themeConfig.site.description;
const canonical = themeConfig.site.website;
const twitter = themeConfig.seo.twitter;
const rss = new URL("/atom.xml", Astro.site).toString();
const optimizedImage = await getOptimizedImageURL();
const lang = themeConfig.appearance.locale ?? "en-us";

const seoLinks = [
	{ rel: "icon", href: "/favicon.svg", type: "image/svg+xml" },
	{
		rel: "alternate",
		type: "application/rss+xml",
		title: themeConfig.site.title,
		href: rss,
	},
];

const seoMeta = [
	{ name: "twitter:image:src", content: optimizedImage },
	{ name: "twitter:image:alt", content: desc },
	{ name: "twitter:creator", content: twitter },
	{ name: "twitter:site", content: twitter },
	{ name: "twitter:card", content: "summary_large_image" },
	{ name: "twitter:title", content: title },
	{ name: "twitter:description", content: desc },
];

const openGraph: SEOProps["openGraph"] = {
	basic: {
		title: title,
		type: "article",
		image: optimizedImage,
		url: canonical,
	},
};

async function getOptimizedImageURL() {
	const image =
		props.banner && (await getImage({ src: props.banner, format: "jpeg" }));
	return new URL(image?.src ?? "/placeholder.png", Astro.url).toString();
}
---
<html lang={lang} class="animation-prepared">
  <head>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      charset="utf-8"
      title={title}
      description={desc}
      extend={{link: seoLinks, meta:seoMeta}}
      openGraph={openGraph}
    />
  </head>

  <body>

      <header class="flex flex-col gap-2.5 text-center transition-swup-header" un-lg="grow-1 justify-between items-start" >
        <PageTitle />
        <PageNav />
      </header>

      <main class="p-7.5 transition-swup-main" un-lg="py-20 min-w-xl"  >
        <slot />
      </main>

      <footer class="transition-swup-footer">
        <PageFooter />
      </footer>
  </body>
</html>


<script>
document.addEventListener('animationend', removeAnimation, false)
function removeAnimation() {
  document.documentElement.classList.remove("animation-prepared");
  document.removeEventListener('animationend', removeAnimation, false);
}
</script>

<style>


  body {
    display: grid;
    grid-template-areas: 
      "main header"
      "main footer";
    grid-template-rows: 1fr 9rem;
    grid-template-columns: 1fr;
    
    height: 100vh;
    max-width: 1200px;
    padding: 0 5rem;
    margin: 0 auto;
  
  }
  main {
    grid-area: main;
    overflow-y: scroll;
  }

  header {
    grid-area: header;
    margin-top: 5rem;
    margin-bottom: 1rem;
  }

  footer {
    grid-area: footer;
  }
  
</style>
